openapi: 3.0.0
info:
  title: 'Buy-Rent API'
  description: ...
  version: 1.0.0
paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Авторизация.
      operationId: 8dcb70df1020986038d098cc08d05dae
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: 'Successfull login.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToken'
        403:
          description: 'Неправильный логин/пароль.'
        422:
          description: 'Ошибка валидации запроса.'
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: 'Регистрация пользователя.'
      operationId: d764dd091cc4494ae0baf360b03319f3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        200:
          description: Успешно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToken'
        422:
          description: 'Ошибка валидации запроса.'
  /api/auth/logout:
    get:
      tags:
        - Auth
      summary: 'Выход из системы.'
      operationId: a8dd056be3e98a38c657f73ed6cdef2d
      responses:
        200:
          description: Успешно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        401:
          description: Неавторизован.
      security:
        -
          sanctum: []
  /api/me:
    get:
      tags:
        - Auth
      summary: 'Возвращает информацию об авторизованном пользователе.'
      operationId: 9d9bc556f927575aa492a88c28fe5908
      responses:
        200:
          description: 'Информация о пользователе.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Неавторизован.
      security:
        -
          sanctum: []
  /api/orders:
    get:
      tags:
        - Orders
      summary: 'Вывод всех заказов пользователя.'
      description: 'Сортируется по дате оформления.'
      operationId: 2cd7e03021e72d9d799c12dfe179c865
      parameters:
        -
          name: page
          in: query
          description: Страница
          required: false
          example: page=1
        -
          name: dir
          in: query
          description: 'Направление сортировки'
          required: false
          example: dir=desc
      responses:
        200:
          description: 'Пагинированный список.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersListPaginated'
    post:
      tags:
        - Orders
      summary: 'Оформление заказа'
      description: "type = rent | purchase. Если type = 'rent', то необходимо также поле time."
      operationId: ea7f9f7ac84384bee1c0ea5239cfee15
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        200:
          description: Успешно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        401:
          description: Неавторизован.
        404:
          description: 'Товар не найден.'
        422:
          description: 'На балансе недостаточно средств/Товар закончился.'
        500:
          description: 'Во время создания заказа произошла ошибка.'
      security:
        -
          sanctum: []
  '/api/orders/{id}/extend':
    post:
      tags:
        - Orders
      summary: 'Продление аренды'
      description: 'Продление аренды'
      operationId: c2db9c6a33be08e58df13ca533e722d7
      parameters:
        -
          name: id
          in: path
          description: 'ID заказа.'
          required: true
          example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendOrderRequest'
      responses:
        200:
          description: Успешно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        401:
          description: Неавторизован.
        404:
          description: 'Заказ не найден.'
        422:
          description: 'Истёк срок аренды/Товар удалён/Итоговая аренда больше 24 часов/Недостаточно средств'
      security:
        -
          sanctum: []
  '/api/orders/{id}':
    get:
      tags:
        - Orders
      summary: 'Просмотреть заказ'
      description: 'Показать информацию о заказе'
      operationId: c29621029e70f65247909d3e09031118
      parameters:
        -
          name: id
          in: path
          description: 'ID заказа.'
          required: true
          example: '1'
      responses:
        200:
          description: Успешно.
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
                type: object
        401:
          description: Неавторизован.
        403:
          description: 'Недостаточно прав.'
        404:
          description: 'Заказ не найден.'
      security:
        -
          sanctum: []
  /api/products:
    get:
      tags:
        - Products
      summary: 'Вывод всех товаров.'
      description: 'Вывод всех товаров.'
      operationId: 1bfaa78d1c2c3848ab8165c5dadcad3e
      parameters:
        -
          name: page
          in: query
          description: Страница
          required: false
          example: page=1
        -
          name: sortBy
          in: query
          description: 'Порядок сортировки'
          required: false
          example: sortBy=price
        -
          name: dir
          in: query
          description: 'Направление сортировки'
          required: false
          example: dir=desc
        -
          name: search
          in: query
          description: 'Поиск по названию'
          required: false
          example: search=Steam
      responses:
        200:
          description: 'Пагинированный список.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsListPaginated'
  /api/wallet/fill:
    post:
      tags:
        - Wallet
      summary: 'Пополнение кошелька, заглушка'
      operationId: 4f98aba1e7eebde4b57975813a1542ee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletFillRequest'
      responses:
        200:
          description: Успешно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        401:
          description: Неавторизован.
      security:
        -
          sanctum: []
components:
  schemas:
    MessageResponse:
      properties:
        message:
          type: string
          example: 'Info message'
      type: object
    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: example@mail.com
        password:
          type: string
          example: password
      type: object
    RegisterRequest:
      required:
        - email
        - password
        - password_confirmation
        - name
      properties:
        email:
          type: string
          example: example@mail.com
        name:
          type: string
          example: Example
        password:
          type: string
          example: password
        password_confirmation:
          type: string
          example: password
      type: object
    CreateOrderRequest:
      required:
        - product_id
        - type
      properties:
        product_id:
          type: integer
          example: '1'
        type:
          type: string
          enum:
            - rent
            - purchase
          example: rent
        time:
          type: integer
          enum:
            - '4'
            - '8'
            - '12'
            - '24'
          example: '4'
      type: object
    ExtendOrderRequest:
      required:
        - product_id
        - type
      properties:
        time:
          type: integer
          enum:
            - '4'
            - '8'
            - '12'
            - '24'
          example: '4'
      type: object
    WalletFillRequest:
      required:
        - amount
      properties:
        amount:
          type: decimal
          example: '1000.99'
      type: object
    Order:
      properties:
        id:
          type: integer
          example: '1'
        product:
          $ref: '#/components/schemas/Product'
        type:
          type: string
          example: rent
        start_at:
          type: string
          example: '2025-05-29 13:09:37'
        end_at:
          type: string
          example: '2025-05-29 13:09:37'
        is_active:
          type: boolean
          example: '1'
        code:
          type: string
          example: EJASUABIMT
        created_at:
          type: string
          example: '2025-05-29T13:09:37.000000Z'
      type: object
    Product:
      properties:
        id:
          type: integer
          example: '1'
        name:
          type: string
          example: 'Steam Account'
        price:
          type: decimal
          example: '15000.00'
        rent_price_4h:
          type: decimal
          example: '100.00'
        rent_price_8h:
          type: decimal
          example: '200.00'
        rent_price_12h:
          type: decimal
          example: '400.00'
        rent_price_24h:
          type: decimal
          example: '800.00'
        deleted_at:
          type: boolean
          example: 'false'
      type: object
    User:
      properties:
        data:
          properties:
            id:
              type: integer
              example: '1'
            name:
              type: string
              example: Example
            email:
              type: string
              example: example@mail.com
            wallet_balance:
              type: decimal
              example: '199.99'
          type: object
      type: object
    OrdersListPaginated:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        links:
          properties:
            first:
              type: string
              example: 'http://host/api/orders?page=1'
            last:
              type: string
              example: 'http://host/api/orders?page=2'
            prev:
              type: string
              example: 'null | http://host/api/orders?page=1'
            next:
              type: string
              example: 'null | http://host/api/orders?page=2'
          type: object
        meta:
          properties:
            current_page:
              type: integer
              example: '1'
            from:
              type: integer
              example: '1'
            last_page:
              type: integer
              example: '3'
            links:
              type: array
              items:
                properties:
                  url:
                    type: string
                    example: 'null | http://host/api/orders?page=2'
                  label:
                    type: string
                    example: 'Next &raquo | 1 |&laquo; Previous'
                  active:
                    type: boolean
                    example: 'false | true'
                type: object
            path:
              type: string
              example: 'http://host/api/orders'
            per_page:
              type: integer
              example: '15'
            to:
              type: integer
              example: '3'
            total:
              type: integer
              example: '3'
          type: object
      type: object
    ProductsListPaginated:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        links:
          properties:
            first:
              type: string
              example: 'http://host/api/products?page=1'
            last:
              type: string
              example: 'http://host/api/products?page=2'
            prev:
              type: string
              example: 'null | http://host/api/products?page=1'
            next:
              type: string
              example: 'null | http://host/api/products?page=2'
          type: object
        meta:
          properties:
            current_page:
              type: integer
              example: '1'
            from:
              type: integer
              example: '1'
            last_page:
              type: integer
              example: '3'
            links:
              type: array
              items:
                properties:
                  url:
                    type: string
                    example: 'null | http://host/api/products?page=2'
                  label:
                    type: string
                    example: 'Next &raquo | 1 |&laquo; Previous'
                  active:
                    type: boolean
                    example: 'false | true'
                type: object
            path:
              type: string
              example: 'http://host/api/products'
            per_page:
              type: integer
              example: '15'
            to:
              type: integer
              example: '3'
            total:
              type: integer
              example: '3'
          type: object
      type: object
    UserToken:
      properties:
        token:
          type: string
          example: tl3waWcgC7o1oORhpZzjBnWcoz130pCgYjVWrX1f0ff6cfee
      type: object
  securitySchemes:
    sanctum:
      type: apiKey
      description: 'Enter token in format (Bearer <token>)'
      name: Authorization
      in: header
tags:
  -
    name: Auth
    description: Auth
  -
    name: Orders
    description: Orders
  -
    name: Products
    description: Products
  -
    name: Wallet
    description: Wallet
